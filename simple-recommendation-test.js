const axios = require('axios');

// Configuration
const BASE_URL = 'http://localhost:8080/api';

// Fonction pour tester les recommandations
async function testRecommendations() {
  console.log('üß™ Test de l\'algorithme de recommandation Souqly\n');
  
  try {
    // Test 1: V√©rifier la connexion
    console.log('üìä Test 1: V√©rification de la connexion');
    try {
      const healthResponse = await axios.get(`${BASE_URL}/health`);
      console.log('‚úÖ Serveur connect√©:', healthResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è Endpoint /health non disponible, continuons...');
    }
    
    // Test 2: R√©cup√©rer tous les produits
    console.log('\nüìä Test 2: R√©cup√©ration des produits');
    const productsResponse = await axios.get(`${BASE_URL}/products`);
    const products = productsResponse.data.content || productsResponse.data; // G√©rer la pagination
    console.log(`‚úÖ ${products.length} produits trouv√©s`);
    
    // Afficher les produits avec leurs statistiques
    console.log('\nüìã D√©tails des produits:');
    products.forEach((product, index) => {
      console.log(`${index + 1}. ${product.title}`);
      console.log(`   üí∞ Prix: ${product.price}‚Ç¨ | ‚≠ê Favoris: ${product.favoriteCount || 0} | üëÅÔ∏è Vues: ${product.viewCount || 0}`);
      console.log(`   üè∑Ô∏è ${product.brand || 'N/A'} | üìç ${product.city || 'N/A'} | üì¶ ${product.condition || 'N/A'}\n`);
    });
    
    // Test 3: Tester les recommandations (si l'endpoint existe)
    console.log('\nüìä Test 3: Test des recommandations');
    try {
      const recommendationsResponse = await axios.get(`${BASE_URL}/recommendations/for-me?limit=5`);
      const recommendations = recommendationsResponse.data.content || recommendationsResponse.data;
      console.log(`‚úÖ ${recommendations.length} recommandations trouv√©es`);
      
      if (recommendations.length > 0) {
        console.log('\nüìã Recommandations:');
        recommendations.forEach((product, index) => {
          console.log(`${index + 1}. ${product.title}`);
          console.log(`   üí∞ Prix: ${product.price}‚Ç¨ | ‚≠ê Favoris: ${product.favoriteCount || 0}`);
          console.log(`   üè∑Ô∏è ${product.brand || 'N/A'} | üìç ${product.city || 'N/A'}\n`);
        });
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Endpoint de recommandations non disponible ou en erreur');
      console.log('   Erreur:', error.response?.data || error.message);
    }
    
    // Test 4: Analyser les donn√©es existantes
    console.log('\nüìä Test 4: Analyse des donn√©es existantes');
    const categories = {};
    const brands = {};
    const conditions = {};
    const priceRanges = { '0-50': 0, '51-100': 0, '101-200': 0, '201-500': 0, '500+': 0 };
    
    products.forEach(product => {
      // Cat√©gories (si disponible)
      if (product.category) {
        categories[product.category] = (categories[product.category] || 0) + 1;
      }
      
      // Marques
      if (product.brand) {
        brands[product.brand] = (brands[product.brand] || 0) + 1;
      }
      
      // Conditions
      if (product.condition) {
        conditions[product.condition] = (conditions[product.condition] || 0) + 1;
      }
      
      // Fourchettes de prix
      const price = parseFloat(product.price) || 0;
      if (price <= 50) priceRanges['0-50']++;
      else if (price <= 100) priceRanges['51-100']++;
      else if (price <= 200) priceRanges['101-200']++;
      else if (price <= 500) priceRanges['201-500']++;
      else priceRanges['500+']++;
    });
    
    console.log('üìà R√©partition par marque:');
    Object.entries(brands).forEach(([brand, count]) => {
      console.log(`   ${brand}: ${count} produits`);
    });
    
    console.log('\nüìà R√©partition par condition:');
    Object.entries(conditions).forEach(([condition, count]) => {
      console.log(`   ${condition}: ${count} produits`);
    });
    
    console.log('\nüìà R√©partition par prix:');
    Object.entries(priceRanges).forEach(([range, count]) => {
      console.log(`   ${range}‚Ç¨: ${count} produits`);
    });
    
    // Test 5: Simuler des recommandations bas√©es sur les donn√©es existantes
    console.log('\nüìä Test 5: Simulation de recommandations');
    console.log('üéØ Recommandations bas√©es sur la popularit√© (favoris):');
    const popularProducts = products
      .filter(p => p.favoriteCount > 0)
      .sort((a, b) => (b.favoriteCount || 0) - (a.favoriteCount || 0))
      .slice(0, 5);
    
    popularProducts.forEach((product, index) => {
      console.log(`${index + 1}. ${product.title} (${product.favoriteCount} favoris)`);
    });
    
    console.log('\nüéØ Recommandations bas√©es sur les vues:');
    const viewedProducts = products
      .filter(p => p.viewCount > 0)
      .sort((a, b) => (b.viewCount || 0) - (a.viewCount || 0))
      .slice(0, 5);
    
    viewedProducts.forEach((product, index) => {
      console.log(`${index + 1}. ${product.title} (${product.viewCount} vues)`);
    });
    
    console.log('\nüéØ Recommandations par prix (moyen):');
    const avgPrice = products.reduce((sum, p) => sum + (parseFloat(p.price) || 0), 0) / products.length;
    const affordableProducts = products
      .filter(p => parseFloat(p.price) <= avgPrice)
      .sort((a, b) => parseFloat(a.price) - parseFloat(b.price))
      .slice(0, 5);
    
    affordableProducts.forEach((product, index) => {
      console.log(`${index + 1}. ${product.title} (${product.price}‚Ç¨)`);
    });
    
    // Test 6: Analyser les produits boost√©s (simulation)
    console.log('\nüìä Test 6: Analyse des produits boost√©s (simulation)');
    const highValueProducts = products.filter(p => parseFloat(p.price) > 1000);
    const popularBrands = products.filter(p => p.brand && ['Apple', 'Audi', 'Samsung'].includes(p.brand));
    
    console.log('üî• Produits haute valeur (>1000‚Ç¨):');
    highValueProducts.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.title} (${product.price}‚Ç¨)`);
    });
    
    console.log('\nüè∑Ô∏è Produits de marques populaires:');
    popularBrands.forEach((product, index) => {
      console.log(`   ${index + 1}. ${product.title} (${product.brand})`);
    });
    
    return products;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    if (error.response) {
      console.error('D√©tails:', error.response.data);
    }
    return [];
  }
}

// Fonction pour analyser l'efficacit√© des algorithmes
function analyzeAlgorithmEfficiency(products) {
  console.log('\nüìä ANALYSE DE L\'EFFICACIT√â');
  console.log('============================');
  
  if (!Array.isArray(products)) {
    console.log('‚ùå Donn√©es de produits invalides');
    return;
  }
  
  // Calculer les m√©triques
  const totalProducts = products.length;
  const productsWithFavorites = products.filter(p => p.favoriteCount > 0).length;
  const productsWithViews = products.filter(p => p.viewCount > 0).length;
  const avgFavorites = products.reduce((sum, p) => sum + (p.favoriteCount || 0), 0) / totalProducts;
  const avgViews = products.reduce((sum, p) => sum + (p.viewCount || 0), 0) / totalProducts;
  const avgPrice = products.reduce((sum, p) => sum + (parseFloat(p.price) || 0), 0) / totalProducts;
  
  console.log(`üìà M√©triques g√©n√©rales:`);
  console.log(`   - Total produits: ${totalProducts}`);
  console.log(`   - Produits avec favoris: ${productsWithFavorites} (${(productsWithFavorites/totalProducts*100).toFixed(1)}%)`);
  console.log(`   - Produits avec vues: ${productsWithViews} (${(productsWithViews/totalProducts*100).toFixed(1)}%)`);
  console.log(`   - Favoris moyens: ${avgFavorites.toFixed(1)}`);
  console.log(`   - Vues moyennes: ${avgViews.toFixed(1)}`);
  console.log(`   - Prix moyen: ${avgPrice.toFixed(1)}‚Ç¨`);
  
  // Recommandations pour am√©liorer l'algorithme
  console.log(`\nüí° Recommandations pour l'algorithme:`);
  if (avgFavorites < 2) {
    console.log(`   - ‚ö†Ô∏è Peu de favoris moyens (${avgFavorites.toFixed(1)}), consid√©rer d'autres m√©triques`);
  }
  if (avgViews < 10) {
    console.log(`   - ‚ö†Ô∏è Peu de vues moyennes (${avgViews.toFixed(1)}), am√©liorer la visibilit√©`);
  }
  if (productsWithFavorites / totalProducts < 0.3) {
    console.log(`   - ‚ö†Ô∏è Faible taux d'engagement (${(productsWithFavorites/totalProducts*100).toFixed(1)}%), optimiser l'UX`);
  }
  
  console.log(`   - ‚úÖ Utiliser un algorithme hybride (content-based + collaborative)`);
  console.log(`   - ‚úÖ Impl√©menter des boosts pour les produits populaires`);
  console.log(`   - ‚úÖ Ajouter des filtres par cat√©gorie/prix/localisation`);
  console.log(`   - ‚úÖ Consid√©rer le prix moyen (${avgPrice.toFixed(1)}‚Ç¨) pour les recommandations`);
}

// Fonction pour simuler l'algorithme de recommandation
function simulateRecommendationAlgorithm(products, userId = 1) {
  console.log('\nüéØ SIMULATION ALGORITHME DE RECOMMANDATION');
  console.log('==========================================');
  
  // Algorithme simple bas√© sur plusieurs crit√®res
  const scoredProducts = products.map(product => {
    let score = 0;
    
    // Score bas√© sur les favoris (poids: 0.4)
    score += (product.favoriteCount || 0) * 0.4;
    
    // Score bas√© sur les vues (poids: 0.3)
    score += (product.viewCount || 0) * 0.3;
    
    // Score bas√© sur le prix (poids: 0.2) - pr√©f√©rer les prix moyens
    const price = parseFloat(product.price) || 0;
    const avgPrice = products.reduce((sum, p) => sum + (parseFloat(p.price) || 0), 0) / products.length;
    const priceScore = Math.max(0, 1 - Math.abs(price - avgPrice) / avgPrice);
    score += priceScore * 0.2;
    
    // Score bas√© sur la marque (poids: 0.1) - pr√©f√©rer les marques populaires
    const popularBrands = ['Apple', 'Audi', 'Samsung', 'Nike', 'Adidas'];
    if (product.brand && popularBrands.includes(product.brand)) {
      score += 0.1;
    }
    
    return { ...product, recommendationScore: score };
  });
  
  // Trier par score de recommandation
  const recommendations = scoredProducts
    .sort((a, b) => b.recommendationScore - a.recommendationScore)
    .slice(0, 5);
  
  console.log('üèÜ Top 5 recommandations simul√©es:');
  recommendations.forEach((product, index) => {
    console.log(`${index + 1}. ${product.title}`);
    console.log(`   üí∞ Prix: ${product.price}‚Ç¨ | ‚≠ê Favoris: ${product.favoriteCount || 0} | üëÅÔ∏è Vues: ${product.viewCount || 0}`);
    console.log(`   üè∑Ô∏è ${product.brand || 'N/A'} | üìä Score: ${product.recommendationScore.toFixed(2)}\n`);
  });
  
  return recommendations;
}

// Fonction principale
async function main() {
  try {
    const products = await testRecommendations();
    
    if (products.length > 0) {
      analyzeAlgorithmEfficiency(products);
      simulateRecommendationAlgorithm(products);
    }
    
    console.log('\nüéâ Tests termin√©s !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. Impl√©menter l\'endpoint de recommandations');
    console.log('   2. Ajouter des donn√©es de test plus compl√®tes');
    console.log('   3. Tester avec diff√©rents utilisateurs');
    console.log('   4. Optimiser les performances');
    console.log('   5. Impl√©menter le syst√®me de boost');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  testRecommendations,
  analyzeAlgorithmEfficiency,
  simulateRecommendationAlgorithm
}; 